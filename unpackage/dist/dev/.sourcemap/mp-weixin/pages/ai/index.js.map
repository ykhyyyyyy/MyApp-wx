{"version":3,"sources":["uni-app:///main.js",null,"webpack:///C:/Users/ykh/Desktop/MyApp-wx/pages/ai/index.vue?f043","webpack:///C:/Users/ykh/Desktop/MyApp-wx/pages/ai/index.vue?0cae","webpack:///C:/Users/ykh/Desktop/MyApp-wx/pages/ai/index.vue?477f","uni-app:///pages/ai/index.vue","webpack:///C:/Users/ykh/Desktop/MyApp-wx/pages/ai/index.vue?0a0b","webpack:///C:/Users/ykh/Desktop/MyApp-wx/pages/ai/index.vue?1a6a"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","components","CustomNavBar","data","messages","localMessageList","role","content","userInput","isLoading","currentStreamingIndex","streamingChunks","scrollTop","userId","chatId","showSidebar","chatHistory","loadingHistory","currentSession","hasLoadedMessages","streamEndTimer","lastStreamLength","watch","handler","immediate","methods","sendMessage","input","sendStreamRequest","console","url","method","header","authHeader","responseType","enableChunked","success","fail","requestTask","chunk","utf8ArrayToString","out","i","array","uni","complete","processStreamChunk","updateStreamMessage","setupStreamTimeoutCheck","clearTimeout","resetStreamTimeoutCheck","finalizeStreamResponse","finalizeAIResponse","scrollToBottom","query","loadMoreMessages","toggleSidebar","fetchChatHistory","then","catch","title","icon","finally","formatDate","yesterday","formatTime","selectSession","fetchSessionMessages","formatChatMessages","startNewChat","getDuration","saveMessagesToStorage","key","loadMessagesFromStorage","ensureStreamingClosed","mounted","beforeDestroy"],"mappings":";;;;;;;;;;;;;AAAA;AAGA;AACA;AAHA;AACAA,EAAE,CAACC,iCAAiC,GAAGC,mBAAmB;AAG1DC,UAAU,CAACC,cAAI,CAAC,C;;;;;;;;;;;;;ACLhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkH;AAClH;AACyD;AACL;AACa;;;AAGjE;AAC6K;AAC7K,gBAAgB,iLAAU;AAC1B,EAAE,2EAAM;AACR,EAAE,gFAAM;AACR,EAAE,yFAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,oFAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAopB,CAAgB,moBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCkIxqB;EACAC;IACAC;EACA;EACAC;IACA;IACA;IAEA;MACAC;MAAA;MACAC;MAAA;MACA;QACAC;QACAC;MACA,EACA;MACAC;MACAC;MACAC;MAAA;MACAC;MACAC;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;IACA;EACA;;EACAC;IACAR;MACAS;QACA;UACA;QACA;MACA;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;;MAEA;MACA;;MAEA;MACA;QACApB;QACAC;MACA;;MAEA;MACA;MACA;;MAEA;MACA;;MAEA;MACA;;MAEA;MACA;QACAM;QACAc;QACAb;MACA;;MAEA;MACA;IACA;IAEA;IACAc;MAAA;MACA;MACA;MACA;MACA;MAEAC;;MAEA;MACA;;MAEA;MACA;QACAvB;QACAC;MACA;;MAEA;MACA;;MAEA;MACA;QACAuB;QACA3B;QACA4B;QACAC;UACA;QAAA,GACAC,WACA;QACAC;QACAC;QACAC;UACA;UACA;;UAEA;UACA;YACAP;YACA;UACA;YACAA;YACA;UACA;QACA;QACAQ;UACAR;UACA;UACA;UACA;UACA;QACA;MACA;;MAEA;MACA;QACAS;UACA;YACA;YACA;YACA;cACAC;YACA;cACA;cACA;gBAIA;gBAAA,IACAC;kBACA;kBACA;kBACA;kBAEA;oBACA;oBACA;sBACAC;sBACAC;sBACA;oBACA;sBACA;sBACA;sBACAD;sBACAC;sBACA;oBACA;sBACA;sBACA,sCACA,6BACAC;sBACAF;sBACAC;sBACA;oBACA;sBACA;sBACA;sBACAA;oBACA;kBACA;kBACA;gBACA;gBApCA;gBACA;gBAqCAH;gBAEA;kBACAV;gBACA;cACA;gBACAA;gBACAU;cACA;YACA;YAEA;cACA;YACA;UACA;YACAV;UACA;QACA;MACA;QACA;QACAA;QAEAe;UACAd;UACA3B;UACA4B;UACAC;YACA;UAAA,GACAC,WACA;UACAG;YACA;cACA;YACA;cACA;YACA;UACA;UACAC;YACAR;YACA;UACA;UACAgB;YACA;YACA;UACA;QACA;MACA;;MAEA;MACA;IACA;IAEA;IACAC;MACA;;MAEA;MACA;;MAEA;MACA;QACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;IACA;IAEA;IACAC;MAAA;MACA;MACA,sCACA;QACAlB;QACA;MACA;;MAEA;MACA;;MAEA;MACA;QACA;MACA;;MAEA;MACA;IACA;IAEA;IACAmB;MAAA;MACA;MACA;QACAC;MACA;;MAEA;MACA;;MAEA;MACA;QACA;QACA;UACA;;UAEA;UACA;YACA;YACApB;YACA;YACA;UACA;;UAEA;UACA;;UAEA;UACA;QACA;MACA;;MAEA;MACA;IACA;IAEA;IACAqB;MAAA;MACA;QACAD;MACA;;MAEA;MACA;;MAEA;MACA;QACA;QACA;UACA;;UAEA;UACA;YACA;YACApB;YACA;YACA;UACA;;UAEA;UACA;;UAEA;UACA;QACA;MACA;;MAEA;MACA;IACA;IAEA;IACAsB;MACA;MACA;QACA;MACA;;MAEA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;;MAEA;MACA;QACAF;QACA;MACA;IACA;IAEA;IACAG;MACA;;MAEA;MACA;QACA7C;MACA;QACA;UACAA;QACA;UACAA;UACAsB;QACA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;;MAEA;MACA;QACAoB;QACA;MACA;IACA;IAEA;IACAI;MAAA;MACA;QACA;QACAC;UACA;YACA;UACA;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA;IAAA,CACA;IAEA;IACAC;MACA;;MAEA;MACA;QACA;MACA;IACA;IAEA;IACAC;MAAA;MACA;MAEA,6DACAC;QACA;QACA;UACA;QACA;UACA;QACA;UACA7B;UACA;QACA;;QAEA;QACA;UACA;QACA;MACA,GACA8B;QACA9B;QACAe;UACAgB;UACAC;QACA;QACA;MACA,GACAC;QACA;MACA;IACA;IAEA;IACAC;MACA;MAEA;MACA;MACA;MACA;MACAC;;MAEA;MACA;QACA;MACA;MACA;MAAA,KACA;QACA;MACA;MACA;MAAA,KACA;QACA;MACA;IACA;IAEA;IACAC;MACA;IACA;IAEA;IACAC;MACA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;;MAEA;MACA;IACA;IAEA;IACAC;MAAA;MACA,8EACAT;QACA;QACA;UACA;UACA;QACA;UACA;QACA;UACA;UACA;YACApD;YACAC;UACA;UACAsB;QACA;;QAEA;QACA;MACA,GACA8B;QACA9B;QACA;QACA;UACAvB;UACAC;QACA;QAEAqC;UACAgB;UACAC;QACA;;QAEA;QACA;MACA,GACAC;QACA;QACA;;QAEA;QACA;UACA;QACA;MACA;IACA;IAEA;IACAM;MACA;QACA;UACA9D;UACAC;QACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;QACA;QACA;QACA;QACA;UACAD;QACA;QAEA;UACAA;UACAC;QACA;MACA;;MAEA;MACAsB;MACA;IACA;IAEA;IACAwC;MAAA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA,yBACA;QACA/D;QACAC;MACA,EACA;;MAEA;MACA;;MAEA;MACA;;MAEA;MACA;QACA;MACA;IACA;IAEA;IACA+D;MACA;MACA;MACA;;MAEA;MACA;QACA;MACA;MAEA;MACA;MACA;MAEA;QACA;MACA;QACA;MACA;IACA;IAEA;IACAC;MACA;QACA;UACA1C;UACA;QACA;;QAEA;QACA;QACA;QAEAA;;QAEA;QACAe;;QAEA;QACA;;QAEA;QACAA;UACA4B;UACArE;UACAiC;YACAP;UACA;UACAQ;YACAR;UACA;QACA;MACA;QACAA;MACA;IACA;IAEA;IACA4C;MACA;QACA;QACA;QAEA5C;QAEA;UACA;UACA;YACAA;YACA;YACA;YACA;YACA;YACA;YACA;UACA;QACA;;QAEA;QACA;UACAA;UACA;UACA;YACAvB;YACAC;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;MACA;QACAsB;QACA;QACA;UACAvB;UACAC;QACA;QACA;QACA;MACA;IACA;IAEA;IACAmE;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;EACAC;IAAA;IACA9C;;IAEA;IACA;;IAEA;IACA;MACA;IACA;;IAEA;IACAe;MACAf;MACA;IACA;;IAEA;IACAA;EACA;EACA+C;IACA;IACAhC;IACAA;;IAEA;IACA;MACAK;MACA;IACA;;IAEA;IACA;IACA;EACA;AACA;AAAA,2B;;;;;;;;;;;;;ACv4BA;AAAA;AAAA;AAAA;AAA27B,CAAgB,g4BAAG,EAAC,C;;;;;;;;;;;ACA/8B;AACA,OAAO,KAAU,EAAE,kBAKd","file":"pages/ai/index.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;\nimport Vue from 'vue'\nimport Page from './pages/ai/index.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./index.vue?vue&type=template&id=2e7a9c24&\"\nvar renderjs\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/ai/index.vue\"\nexport default component.exports","export * from \"-!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=template&id=2e7a9c24&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  var g0 = !_vm.loadingHistory ? _vm.chatHistory.length : null\n  var l0 =\n    !_vm.loadingHistory && !(g0 === 0)\n      ? _vm.__map(_vm.chatHistory, function (session, index) {\n          var $orig = _vm.__get_orig(session)\n          var m0 = _vm.formatDate(session.createdAt)\n          return {\n            $orig: $orig,\n            m0: m0,\n          }\n        })\n      : null\n  var g1 = _vm.isLoading || !_vm.userInput.trim()\n  _vm.$mp.data = Object.assign(\n    {},\n    {\n      $root: {\n        g0: g0,\n        l0: l0,\n        g1: g1,\n      },\n    }\n  )\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=script&lang=js&\"","<template>\n\t<view class=\"container\">\n\t\t<!-- Custom navigation bar with back button -->\n\t\t<custom-nav-bar title=\"AI助手\" subtitle=\"智能问答\" :show-back=\"true\"></custom-nav-bar>\n\t\t\n\t\t<!-- Sidebar for chat history (hidden by default) -->\n\t\t<view class=\"chat-sidebar\" :class=\"{ 'sidebar-open': showSidebar }\">\n\t\t\t<view class=\"sidebar-header\">\n\t\t\t\t<text class=\"sidebar-title\">\n\t\t\t\t\t<image src=\"/static/icons/chat-history.png\" class=\"sidebar-title-icon\"></image>\n\t\t\t\t\t会话历史\n\t\t\t\t</text>\n\t\t\t\t<view class=\"sidebar-close\" @click=\"toggleSidebar\">\n\t\t\t\t\t<image src=\"/static/icons/close.png\" class=\"close-icon\"></image>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t\t\n\t\t\t<view class=\"chat-history-list\">\n\t\t\t\t<view v-if=\"loadingHistory\" class=\"loading-message\">\n\t\t\t\t\t<view class=\"loading-dots\">\n\t\t\t\t\t\t<view class=\"dot\"></view>\n\t\t\t\t\t\t<view class=\"dot\"></view>\n\t\t\t\t\t\t<view class=\"dot\"></view>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<view v-else-if=\"chatHistory.length === 0\" class=\"empty-history\">\n\t\t\t\t\t<text>暂无历史会话</text>\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<view \n\t\t\t\t\tv-else \n\t\t\t\t\tv-for=\"(session, index) in chatHistory\" \n\t\t\t\t\t:key=\"session.id\" \n\t\t\t\t\tclass=\"history-item\"\n\t\t\t\t\t@click=\"selectSession(session)\"\n\t\t\t\t\t:class=\"{ 'active-session': currentSession && currentSession.id === session.id }\"\n\t\t\t\t>\n\t\t\t\t\t<view class=\"history-title-row\">\n\t\t\t\t\t\t<image src=\"/static/icons/session.png\" class=\"history-item-icon\"></image>\n\t\t\t\t\t\t<text class=\"history-title\">会话 {{ index + 1 }}</text>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view class=\"history-date-row\">\n\t\t\t\t\t\t<image src=\"/static/icons/calendar.png\" class=\"history-date-icon\"></image>\n\t\t\t\t\t\t<text class=\"history-date\">{{ formatDate(session.createdAt) }}</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t\t\n\t\t\t<view class=\"new-chat\" @click=\"startNewChat\">\n\t\t\t\t<image src=\"/static/icons/new-chat.png\" class=\"new-chat-icon\"></image>\n\t\t\t\t<text class=\"new-chat-text\">新建会话</text>\n\t\t\t</view>\n\t\t</view>\n\t\t\n\t\t<!-- Main chat interface -->\n\t\t<view class=\"main-content\">\n\t\t\t<view class=\"ai-content\" :class=\"{ 'with-sidebar': showSidebar }\">\n\t\t\t\t<!-- History button moved outside of chat container -->\n\t\t\t\t<view class=\"header-actions\">\n\t\t\t\t\t<view class=\"history-btn\" @click=\"toggleSidebar\">\n\t\t\t\t\t\t<image src=\"/static/icons/history.png\" class=\"history-icon\"></image>\n\t\t\t\t\t\t<text class=\"history-text\">历史记录</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\n\t\t\t<view class=\"chat-container\">\n\t\t\t\t\t<!-- Removed chat header with history button -->\n\t\t\t\t\t<scroll-view \n\t\t\t\t\t\tscroll-y \n\t\t\t\t\t\tclass=\"chat-messages\" \n\t\t\t\t\t\t:scroll-top=\"scrollTop\"\n\t\t\t\t\t\t:scroll-with-animation=\"true\"\n\t\t\t\t\t\t@scrolltoupper=\"loadMoreMessages\"\n\t\t\t\t\t\tref=\"chatScroll\"\n\t\t\t\t\t\tenable-flex=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<view class=\"messages-wrapper\">\n\t\t\t\t\t\t\t<!-- 只渲染本地消息列表 -->\n\t\t\t\t\t\t\t<view class=\"message-container\" \n\t\t\t\t\t\t\t\tv-for=\"(message, index) in localMessageList\" \n\t\t\t\t\t\t\t\t:key=\"'msg-' + index\" \n\t\t\t\t\t\t\t\t:class=\"{'user-container': message.role === 'user', 'ai-container': message.role === 'ai'}\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<view class=\"message\" \n\t\t\t\t\t\t\t\t\t:class=\"message.role === 'user' ? 'user' : 'ai'\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<image \n\t\t\t\t\t\t\t\t\t\tv-if=\"message.role === 'ai'\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/static/avatars/ai-avatar.png\" \n\t\t\t\t\t\t\t\t\t\tclass=\"message-avatar\"\n\t\t\t\t\t\t\t\t\t></image>\n\t\t\t\t\t\t\t\t\t<view class=\"message-content\">\n\t\t\t\t\t\t\t\t\t\t<text class=\"message-text\">{{ message.content }}</text>\n\t\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</scroll-view>\n\t\t\t\t\n\t\t\t\t<view class=\"chat-input-area\">\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\tclass=\"chat-input\" \n\t\t\t\t\t\t\tplaceholder=\"请输入您的问题...\" \n\t\t\t\t\t\t\tv-model=\"userInput\"\n\t\t\t\t\t\t\t@confirm=\"sendMessage\"\n\t\t\t\t\t\t\t:disabled=\"isLoading\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button \n\t\t\t\t\t\t\tclass=\"send-btn\" \n\t\t\t\t\t\t\t@click=\"sendMessage\" \n\t\t\t\t\t\t\t:disabled=\"isLoading || !userInput.trim()\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<image src=\"/static/icons/send.png\" class=\"send-icon\" v-if=\"!isLoading\"></image>\n\t\t\t\t\t\t\t<image src=\"/static/icons/loading.png\" class=\"loading-icon\" v-else></image>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\t\t\n\t\t<!-- Overlay for mobile -->\n\t\t<view class=\"sidebar-overlay\" v-if=\"showSidebar\" @click=\"toggleSidebar\"></view>\n\t</view>\n</template>\n\n<script>\nimport CustomNavBar from '@/components/CustomNavBar.vue';\n\nexport default {\n\tcomponents: {\n\t\tCustomNavBar\n\t},\n\tdata() {\n\t\t// 生成一个初始会话ID\n\t\tconst initialChatId =Date.now();\n\t\t\n\t\treturn {\n\t\t\tmessages: [], // 清空默认消息，由localMessageList替代\n\t\t\tlocalMessageList: [ // 新增本地消息列表\n\t\t\t\t{\n\t\t\t\t\trole: 'ai',\n\t\t\t\t\tcontent: '您好，我是校园AI助手，有什么可以帮助您的吗？'\n\t\t\t\t}\n\t\t\t],\n\t\t\tuserInput: '',\n\t\t\tisLoading: false,\n\t\t\tcurrentStreamingIndex: -1, // 当前正在流式更新的消息索引\n\t\t\tstreamingChunks: [],\n\t\t\tscrollTop: 0,\n\t\t\tuserId: 1, // 默认用户ID，实际中应从登录状态获取\n\t\t\tchatId: initialChatId, // 使用初始生成的会话ID\n\t\t\tshowSidebar: false, // 控制侧边栏显示\n\t\t\tchatHistory: [], // 用户的历史会话\n\t\t\tloadingHistory: false, // 历史记录加载状态\n\t\t\tcurrentSession: null, // 当前选中的会话\n\t\t\thasLoadedMessages: false, // 标记是否已经加载过消息\n\t\t\tstreamEndTimer: null, // 用于流式传输结束检测的定时器\n\t\t\tlastStreamLength: 0 // 用于流式传输结束检测的最后内容长度\n\t\t}\n\t},\n\twatch: {\n\t\tchatId: {\n\t\t\thandler(newId, oldId) {\n\t\t\t\tif (newId !== oldId) {\n\t\t\t\t\tthis.loadMessagesFromStorage();\n\t\t\t\t}\n\t\t\t},\n\t\t\timmediate: true\n\t\t}\n\t},\n\tmethods: {\n\t\t// 发送消息到API (流式响应)\n\t\tsendMessage() {\n\t\t\t// 验证输入不为空\n\t\t\tif (!this.userInput.trim() || this.isLoading) return;\n\t\t\t\n\t\t\t// 存储当前输入\n\t\t\tconst userQuestion = this.userInput.trim();\n\t\t\t\n\t\t\t// 添加用户消息到本地消息列表\n\t\t\tthis.localMessageList.push({\n\t\t\t\trole: 'user',\n\t\t\t\tcontent: userQuestion\n\t\t\t});\n\t\t\t\n\t\t\t// 清空输入框并显示加载状态\n\t\t\tthis.userInput = '';\n\t\t\tthis.isLoading = true;\n\t\t\t\n\t\t\t// 保存消息到本地存储\n\t\t\tthis.saveMessagesToStorage();\n\t\t\t\n\t\t\t// 滚动到底部\n\t\t\tthis.scrollToBottom();\n\t\t\t\n\t\t\t// 准备发送的数据\n\t\t\tconst chatData = {\n\t\t\t\tuserId: this.userId,\n\t\t\t\tinput: userQuestion,\n\t\t\t\tchatId: this.chatId\n\t\t\t};\n\t\t\t\n\t\t\t// 发送流式请求\n\t\t\tthis.sendStreamRequest(chatData);\n\t\t},\n\t\t\n\t\t// 发送流式请求\n\t\tsendStreamRequest(chatData) {\n\t\t\t// 获取配置\n\t\t\tconst config = this.$config;\n\t\t\tconst url = config.BaseUrl + '/api/ai/stream/chat';\n\t\t\tconst authHeader = config.getAuthHeader();\n\t\t\t\n\t\t\tconsole.log('[AI Chat] 发送流式请求:', url);\n\t\t\t\n\t\t\t// 重置流式数据\n\t\t\tthis.streamingChunks = [];\n\t\t\t\n\t\t\t// 创建一个AI回复，初始显示\"思考中...\"\n\t\t\tthis.localMessageList.push({\n\t\t\t\trole: 'ai',\n\t\t\t\tcontent: '思考中...'\n\t\t\t});\n\t\t\t\n\t\t\t// 记录当前正在流式更新的消息索引\n\t\t\tthis.currentStreamingIndex = this.localMessageList.length - 1;\n\t\t\t\n\t\t\t// 使用uni.request发送请求\n\t\t\tconst requestTask = uni.request({\n\t\t\t\turl: url,\n\t\t\t\tdata: chatData,\n\t\t\t\tmethod: 'POST',\n\t\t\t\theader: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t...authHeader\n\t\t\t\t},\n\t\t\t\tresponseType: 'text',\n\t\t\t\tenableChunked: true,\n\t\t\t\tsuccess: (res) => {\n\t\t\t\t\t// 检查是否已收到了分块数据\n\t\t\t\t\tconst hasStreamContent = this.streamingChunks.length > 0;\n\t\t\t\t\t\n\t\t\t\t\t// 只有在没有收到分块数据时才处理完整响应\n\t\t\t\t\tif (res.data && !hasStreamContent) {\n\t\t\t\t\t\tconsole.log('[AI Chat] 接收到完整响应，未收到分块数据');\n\t\t\t\t\t\tthis.finalizeAIResponse(res.data);\n\t\t\t\t\t} else if (!hasStreamContent) {\n\t\t\t\t\t\tconsole.log('[AI Chat] 没有收到任何数据');\n\t\t\t\t\t\tthis.updateStreamMessage('抱歉，未能获取回复，请重试。', true);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfail: (err) => {\n\t\t\t\t\tconsole.error('[AI Chat] 请求失败:', err);\n\t\t\t\t\t// 更新AI消息为错误信息\n\t\t\t\t\tthis.updateStreamMessage('网络请求失败，请检查网络连接后重试。', true);\n\t\t\t\t\tthis.currentStreamingIndex = -1;\n\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// 监听分块数据接收\n\t\t\tif (requestTask && requestTask.onChunkReceived) {\n\t\t\t\trequestTask.onChunkReceived((response) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// 处理数据块\n\t\t\t\t\t\tlet chunk = '';\n\t\t\t\t\t\tif (typeof response.data === 'string') {\n\t\t\t\t\t\t\tchunk = response.data;\n\t\t\t\t\t\t} else if (response.data instanceof ArrayBuffer) {\n\t\t\t\t\t\t\t// 特殊处理ArrayBuffer，确保微信小程序环境兼容性\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t// 方法1：直接使用Uint8Array手动解码UTF-8\n\t\t\t\t\t\t\t\tconst bytes = new Uint8Array(response.data);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// UTF-8解码函数\n\t\t\t\t\t\t\t\tfunction utf8ArrayToString(array) {\n\t\t\t\t\t\t\t\t\tlet out = '';\n\t\t\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\t\t\tconst len = array.length;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (i < len) {\n\t\t\t\t\t\t\t\t\t\t// 处理单字节字符 (ASCII 0 - 127)\n\t\t\t\t\t\t\t\t\t\tif (array[i] < 0x80) {\n\t\t\t\t\t\t\t\t\t\t\tout += String.fromCharCode(array[i]);\n\t\t\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t\t\t// 处理双字节字符\n\t\t\t\t\t\t\t\t\t\t} else if ((array[i] > 0xBF) && (array[i] < 0xE0)) {\n\t\t\t\t\t\t\t\t\t\t\tif (i + 1 >= len) break;\n\t\t\t\t\t\t\t\t\t\t\tconst char = ((array[i] & 0x1F) << 6) | (array[i+1] & 0x3F);\n\t\t\t\t\t\t\t\t\t\t\tout += String.fromCharCode(char);\n\t\t\t\t\t\t\t\t\t\t\ti += 2;\n\t\t\t\t\t\t\t\t\t\t// 处理三字节字符 (大多数中文字符)\n\t\t\t\t\t\t\t\t\t\t} else if ((array[i] > 0xDF) && (array[i] < 0xF0)) {\n\t\t\t\t\t\t\t\t\t\t\tif (i + 2 >= len) break;\n\t\t\t\t\t\t\t\t\t\t\tconst char = ((array[i] & 0x0F) << 12) |\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t((array[i+1] & 0x3F) << 6) |\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(array[i+2] & 0x3F);\n\t\t\t\t\t\t\t\t\t\t\tout += String.fromCharCode(char);\n\t\t\t\t\t\t\t\t\t\t\ti += 3;\n\t\t\t\t\t\t\t\t\t\t// 处理四字节字符 (表情符号等)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (i + 3 >= len) break;\n\t\t\t\t\t\t\t\t\t\t\t// 这里简化处理，可能不完全支持四字节字符\n\t\t\t\t\t\t\t\t\t\t\ti += 4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn out;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tchunk = utf8ArrayToString(bytes);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (!chunk || chunk.length < 2) {\n\t\t\t\t\t\t\t\t\tconsole.warn('[AI Chat] ArrayBuffer解码结果过短');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tconsole.error('[AI Chat] 处理ArrayBuffer错误:', e);\n\t\t\t\t\t\t\t\tchunk = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (chunk) {\n\t\t\t\t\t\t\tthis.processStreamChunk(chunk);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('[AI Chat] 处理数据块错误:', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// 不支持分块接收，使用普通请求\n\t\t\t\tconsole.warn('[AI Chat] 不支持流式接收，使用普通请求');\n\t\t\t\t\n\t\t\t\tuni.request({\n\t\t\t\t\turl: url,\n\t\t\t\t\tdata: chatData,\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theader: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t...authHeader\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: (res) => {\n\t\t\t\t\t\tif (res.data) {\n\t\t\t\t\t\t\tthis.finalizeAIResponse(res.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.updateStreamMessage('服务器返回了空响应', true);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tfail: (err) => {\n\t\t\t\t\t\tconsole.error('[AI Chat] 普通请求失败:', err);\n\t\t\t\t\t\tthis.updateStreamMessage('网络请求失败，请检查网络连接', true);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\tthis.currentStreamingIndex = -1;\n\t\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 设置流式传输超时检测\n\t\t\tthis.setupStreamTimeoutCheck();\n\t\t},\n\t\t\n\t\t// 处理流式数据块\n\t\tprocessStreamChunk(chunk) {\n\t\t\tif (!chunk) return;\n\t\t\t\n\t\t\t// 添加数据块\n\t\t\tthis.streamingChunks.push(chunk);\n\t\t\t\n\t\t\t// 收到第一个数据块时，清除\"思考中...\"\n\t\t\tif (this.streamingChunks.length === 1) {\n\t\t\t\tthis.updateStreamMessage('');\n\t\t\t}\n\t\t\t\n\t\t\t// 更新消息内容\n\t\t\tconst fullContent = this.streamingChunks.join('');\n\t\t\tthis.updateStreamMessage(fullContent);\n\t\t\t\n\t\t\t// 重置超时检测\n\t\t\tthis.resetStreamTimeoutCheck();\n\t\t},\n\t\t\n\t\t// 更新流式消息内容\n\t\tupdateStreamMessage(content, isFinal = false) {\n\t\t\t// 验证索引是否有效\n\t\t\tif (this.currentStreamingIndex < 0 || \n\t\t\t\tthis.currentStreamingIndex >= this.localMessageList.length) {\n\t\t\t\tconsole.error('[AI Chat] 无效的流式消息索引:', this.currentStreamingIndex);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 更新消息内容\n\t\t\tthis.$set(this.localMessageList[this.currentStreamingIndex], 'content', content);\n\t\t\t\n\t\t\t// 如果是最终内容，保存到本地存储\n\t\t\tif (isFinal) {\n\t\t\t\tthis.saveMessagesToStorage();\n\t\t\t}\n\t\t\t\n\t\t\t// 滚动到底部\n\t\t\tthis.scrollToBottom();\n\t\t},\n\t\t\n\t\t// 设置流式传输超时检测\n\t\tsetupStreamTimeoutCheck() {\n\t\t\t// 清除现有定时器\n\t\t\tif (this.streamEndTimer) {\n\t\t\t\tclearTimeout(this.streamEndTimer);\n\t\t\t}\n\t\t\t\n\t\t\t// 初始化最后内容长度\n\t\t\tthis.lastStreamLength = 0;\n\t\t\t\n\t\t\t// 创建检查函数\n\t\t\tconst checkStreamEnd = () => {\n\t\t\t\t// 如果当前有流式消息\n\t\t\t\tif (this.currentStreamingIndex >= 0) {\n\t\t\t\t\tconst currentLength = this.streamingChunks.join('').length;\n\t\t\t\t\t\n\t\t\t\t\t// 检查是否停止变化\n\t\t\t\t\tif (currentLength > 0 && currentLength === this.lastStreamLength) {\n\t\t\t\t\t\t// 3秒没有新内容，流式传输结束\n\t\t\t\t\t\tconsole.log('[AI Chat] 检测到流式传输结束');\n\t\t\t\t\t\tthis.finalizeStreamResponse();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 更新最后内容长度\n\t\t\t\t\tthis.lastStreamLength = currentLength;\n\t\t\t\t\t\n\t\t\t\t\t// 继续检查\n\t\t\t\t\tthis.streamEndTimer = setTimeout(checkStreamEnd, 3000);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t// 启动检查\n\t\t\tthis.streamEndTimer = setTimeout(checkStreamEnd, 3000);\n\t\t},\n\t\t\n\t\t// 重置流式传输超时检测\n\t\tresetStreamTimeoutCheck() {\n\t\t\tif (this.streamEndTimer) {\n\t\t\t\tclearTimeout(this.streamEndTimer);\n\t\t\t}\n\t\t\t\n\t\t\t// 更新最后内容长度\n\t\t\tthis.lastStreamLength = this.streamingChunks.join('').length;\n\t\t\t\n\t\t\t// 创建检查函数\n\t\t\tconst checkStreamEnd = () => {\n\t\t\t\t// 如果当前有流式消息\n\t\t\t\tif (this.currentStreamingIndex >= 0) {\n\t\t\t\t\tconst currentLength = this.streamingChunks.join('').length;\n\t\t\t\t\t\n\t\t\t\t\t// 检查是否停止变化\n\t\t\t\t\tif (currentLength === this.lastStreamLength) {\n\t\t\t\t\t\t// 3秒没有新内容，流式传输结束\n\t\t\t\t\t\tconsole.log('[AI Chat] 检测到流式传输结束');\n\t\t\t\t\t\tthis.finalizeStreamResponse();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 更新最后内容长度\n\t\t\t\t\tthis.lastStreamLength = currentLength;\n\t\t\t\t\t\n\t\t\t\t\t// 继续检查\n\t\t\t\t\tthis.streamEndTimer = setTimeout(checkStreamEnd, 3000);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t// 启动检查\n\t\t\tthis.streamEndTimer = setTimeout(checkStreamEnd, 3000);\n\t\t},\n\t\t\n\t\t// 完成流式响应\n\t\tfinalizeStreamResponse() {\n\t\t\t// 如果没有流式消息索引，直接返回\n\t\t\tif (this.currentStreamingIndex < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 获取最终内容\n\t\t\tconst finalContent = this.streamingChunks.join('');\n\t\t\t\n\t\t\t// 更新为最终内容\n\t\t\tthis.updateStreamMessage(finalContent, true);\n\t\t\t\n\t\t\t// 重置状态\n\t\t\tthis.currentStreamingIndex = -1;\n\t\t\tthis.streamingChunks = [];\n\t\t\tthis.isLoading = false;\n\t\t\t\n\t\t\t// 清除定时器\n\t\t\tif (this.streamEndTimer) {\n\t\t\t\tclearTimeout(this.streamEndTimer);\n\t\t\t\tthis.streamEndTimer = null;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 处理完整响应\n\t\tfinalizeAIResponse(responseData) {\n\t\t\tlet content = '';\n\t\t\t\n\t\t\t// 解析响应\n\t\t\tif (typeof responseData === 'string') {\n\t\t\t\tcontent = responseData;\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tcontent = JSON.stringify(responseData);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcontent = '接收到无效响应';\n\t\t\t\t\tconsole.error('[AI Chat] 无法解析响应:', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 更新消息内容\n\t\t\tthis.updateStreamMessage(content, true);\n\t\t\t\n\t\t\t// 重置状态\n\t\t\tthis.currentStreamingIndex = -1;\n\t\t\tthis.streamingChunks = [];\n\t\t\tthis.isLoading = false;\n\t\t\t\n\t\t\t// 清除定时器\n\t\t\tif (this.streamEndTimer) {\n\t\t\t\tclearTimeout(this.streamEndTimer);\n\t\t\t\tthis.streamEndTimer = null;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 滚动聊天区域到底部\n\t\tscrollToBottom() {\n\t\t\tthis.$nextTick(() => {\n\t\t\t\tconst query = uni.createSelectorQuery().in(this);\n\t\t\t\tquery.select('.chat-messages').boundingClientRect(data => {\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tthis.scrollTop = data.height * 2; // 确保滚动到底部\n\t\t\t\t\t}\n\t\t\t\t}).exec();\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 加载更多历史消息（向上滚动时）\n\t\tloadMoreMessages() {\n\t\t\t// 这里可以实现加载历史消息的逻辑\n\t\t\t// 如果需要分页加载历史消息，可以调用获取历史消息的API\n\t\t},\n\t\t\n\t\t// 切换侧边栏显示状态\n\t\ttoggleSidebar() {\n\t\t\tthis.showSidebar = !this.showSidebar;\n\t\t\t\n\t\t\t// 打开侧边栏时获取历史记录\n\t\t\tif (this.showSidebar && this.chatHistory.length === 0) {\n\t\t\t\tthis.fetchChatHistory();\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 获取用户的聊天历史\n\t\tfetchChatHistory() {\n\t\t\tthis.loadingHistory = true;\n\t\t\t\n\t\t\tthis.$api.get(`/api/ai/history?userId=${this.userId}`)\n\t\t\t\t.then(response => {\n\t\t\t\t\t// Handle the specific API response format\n\t\t\t\t\tif (response && response.code === 1 && Array.isArray(response.data)) {\n\t\t\t\t\t\tthis.chatHistory = response.data;\n\t\t\t\t\t} else if (Array.isArray(response)) {\n\t\t\t\t\t\tthis.chatHistory = response;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('Unexpected history response format:', response);\n\t\t\t\t\t\tthis.chatHistory = [];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort chat history by updatedAt (newest first)\n\t\t\t\t\tthis.chatHistory.sort((a, b) => {\n\t\t\t\t\t\treturn new Date(b.updatedAt) - new Date(a.updatedAt);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.error('Error fetching chat history:', error);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '获取历史记录失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t\tthis.chatHistory = [];\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tthis.loadingHistory = false;\n\t\t\t\t});\n\t\t},\n\t\t\n\t\t// 格式化日期，处理会话历史的显示日期\n\t\tformatDate(dateString) {\n\t\t\tif (!dateString) return '';\n\t\t\t\n\t\t\tconst date = new Date(dateString);\n\t\t\tconst now = new Date();\n\t\t\tconst today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\t\t\tconst yesterday = new Date(today);\n\t\t\tyesterday.setDate(yesterday.getDate() - 1);\n\t\t\t\n\t\t\t// 检查是否是今天\n\t\t\tif (date >= today) {\n\t\t\t\treturn '今天 ' + this.formatTime(date);\n\t\t\t}\n\t\t\t// 检查是否是昨天\n\t\t\telse if (date >= yesterday && date < today) {\n\t\t\t\treturn '昨天 ' + this.formatTime(date);\n\t\t\t}\n\t\t\t// 否则显示完整日期\n\t\t\telse {\n\t\t\t\treturn `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${this.formatTime(date)}`;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 格式化时间部分\n\t\tformatTime(date) {\n\t\t\treturn `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n\t\t},\n\t\t\n\t\t// 选择历史会话\n\t\tselectSession(session) {\n\t\t\t// 更新当前会话和会话ID\n\t\t\tthis.currentSession = session;\n\t\t\tthis.chatId = session.id;\n\t\t\t\n\t\t\t// 清空当前消息并显示加载状态\n\t\t\tthis.localMessageList = [];\n\t\t\tthis.isLoading = true;\n\t\t\t\n\t\t\t// 关闭侧边栏\n\t\t\tthis.showSidebar = false;\n\t\t\t\n\t\t\t// 获取会话的聊天记录\n\t\t\tthis.fetchSessionMessages(session.id);\n\t\t},\n\t\t\n\t\t// 获取会话的聊天记录\n\t\tfetchSessionMessages(chatSessionId) {\n\t\t\tthis.$api.get(`/api/ai/history/message?chatSessionId=${chatSessionId}`)\n\t\t\t\t.then(response => {\n\t\t\t\t\t// 处理响应数据\n\t\t\t\t\tif (response && response.code === 1 && Array.isArray(response.data)) {\n\t\t\t\t\t\t// 转换聊天记录格式并加载到本地消息列表\n\t\t\t\t\t\tthis.localMessageList = this.formatChatMessages(response.data);\n\t\t\t\t\t} else if (Array.isArray(response)) {\n\t\t\t\t\t\tthis.localMessageList = this.formatChatMessages(response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 如果没有有效的消息数据，显示默认消息\n\t\t\t\t\t\tthis.localMessageList = [{\n\t\t\t\t\t\t\trole: 'ai',\n\t\t\t\t\t\t\tcontent: `已切换到会话 ${this.formatDate(this.currentSession.createdAt)}。没有找到历史消息。`\n\t\t\t\t\t\t}];\n\t\t\t\t\t\tconsole.error('接收到意外的消息历史格式:', response);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 加载后保存到本地存储\n\t\t\t\t\tthis.saveMessagesToStorage();\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.error('获取聊天消息失败:', error);\n\t\t\t\t\t// 显示错误消息\n\t\t\t\t\tthis.localMessageList = [{\n\t\t\t\t\t\trole: 'ai',\n\t\t\t\t\t\tcontent: '加载历史消息失败，请重试。'\n\t\t\t\t\t}];\n\t\t\t\t\t\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '获取聊天记录失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// 即使加载失败也保存到本地存储\n\t\t\t\t\tthis.saveMessagesToStorage();\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\t// 结束加载状态\n\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t\t\n\t\t\t\t\t// 滚动到底部\n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tthis.scrollToBottom();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\t\n\t\t// 格式化聊天记录数据\n\t\tformatChatMessages(messages) {\n\t\t\tif (!messages || !messages.length) {\n\t\t\t\treturn [{\n\t\t\t\t\trole: 'ai',\n\t\t\t\t\tcontent: `已切换到会话 ${this.formatDate(this.currentSession.createdAt)}。没有找到历史消息。`\n\t\t\t\t}];\n\t\t\t}\n\t\t\t\n\t\t\t// 按时间排序，确保消息按顺序显示\n\t\t\t// API可能不返回时间，所以以数组顺序为准\n\t\t\tconst sortedMessages = [...messages];\n\t\t\t\n\t\t\t// 转换为应用内消息格式\n\t\t\tconst formattedMessages = sortedMessages.map(msg => {\n\t\t\t\t// 根据API返回的role字段确定消息角色\n\t\t\t\t// API返回\"USER\"表示用户消息，\"ASSISTANT\"表示AI消息\n\t\t\t\tlet role = 'ai';\n\t\t\t\tif (msg.role === 'USER') {\n\t\t\t\t\trole = 'user';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\trole: role,\n\t\t\t\t\tcontent: msg.content || ''\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// 确保经过格式化的消息被正确返回\n\t\t\tconsole.log('[AI Chat] 已格式化消息数量:', formattedMessages.length);\n\t\t\treturn formattedMessages;\n\t\t},\n\t\t\n\t\t// 开始新会话\n\t\tstartNewChat() {\n\t\t\t// 清除当前会话\n\t\t\tthis.currentSession = null;\n\t\t\t\n\t\t\t// 生成新的会话ID - 在实际应用中，这应该由后端生成\n\t\t\t// 这里使用时间戳 + 随机数作为临时ID\n\t\t\tconst timestamp = new Date().getTime();\n\t\t\tconst random = Math.floor(Math.random() * 1000);\n\t\t\tthis.chatId = timestamp + random;\n\t\t\t\n\t\t\t// 清空本地消息列表\n\t\t\tthis.localMessageList = [\n\t\t\t\t{\n\t\t\t\t\trole: 'ai',\n\t\t\t\t\tcontent: '已开始新会话，有什么可以帮助您的？'\n\t\t\t\t}\n\t\t\t];\n\t\t\t\n\t\t\t// 保存初始消息到本地存储\n\t\t\tthis.saveMessagesToStorage();\n\t\t\t\n\t\t\t// 关闭侧边栏\n\t\t\tthis.showSidebar = false;\n\t\t\t\n\t\t\t// 滚动到底部\n\t\t\tthis.$nextTick(() => {\n\t\t\t\tthis.scrollToBottom();\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 计算会话持续时间\n\t\tgetDuration(startDate, endDate) {\n\t\t\tconst start = new Date(startDate);\n\t\t\tconst end = new Date(endDate);\n\t\t\tconst diffMs = end - start;\n\t\t\t\n\t\t\t// 如果小于1分钟\n\t\t\tif (diffMs < 60000) {\n\t\t\t\treturn '短会话';\n\t\t\t}\n\t\t\t\n\t\t\tconst diffMins = Math.floor(diffMs / 60000);\n\t\t\tconst hours = Math.floor(diffMins / 60);\n\t\t\tconst mins = diffMins % 60;\n\t\t\t\n\t\t\tif (hours > 0) {\n\t\t\t\treturn `${hours}小时${mins > 0 ? mins + '分钟' : ''}`;\n\t\t\t} else {\n\t\t\t\treturn `${mins}分钟`;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 保存消息到本地存储\n\t\tsaveMessagesToStorage() {\n\t\t\ttry {\n\t\t\t\tif (!Array.isArray(this.localMessageList) || this.localMessageList.length === 0) {\n\t\t\t\t\tconsole.warn('[AI Chat] 没有消息可保存');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 只保存当前会话的消息\n\t\t\t\tconst storageKey = `chat_messages_${this.chatId}`;\n\t\t\t\tconst jsonMessages = JSON.stringify(this.localMessageList);\n\t\t\t\t\n\t\t\t\tconsole.log('[AI Chat] 正在保存消息, chatId:', this.chatId, '数量:', this.localMessageList.length);\n\t\t\t\t\n\t\t\t\t// 保存到本地存储\n\t\t\t\tuni.setStorageSync(storageKey, jsonMessages);\n\t\t\t\t\n\t\t\t\t// 同步到messages数组，确保两个数组保持一致\n\t\t\t\tthis.messages = [...this.localMessageList];\n\t\t\t\t\n\t\t\t\t// 立即保存\n\t\t\t\tuni.setStorage({\n\t\t\t\t\tkey: storageKey,\n\t\t\t\t\tdata: jsonMessages,\n\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\tconsole.log('[AI Chat] 消息保存成功');\n\t\t\t\t\t},\n\t\t\t\t\tfail: (err) => {\n\t\t\t\t\t\tconsole.error('[AI Chat] 消息保存失败:', err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('[AI Chat] 保存消息失败:', e);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 从本地存储加载消息\n\t\tloadMessagesFromStorage() {\n\t\t\ttry {\n\t\t\t\tconst storageKey = `chat_messages_${this.chatId}`;\n\t\t\t\tconst storedMessages = uni.getStorageSync(storageKey);\n\t\t\t\t\n\t\t\t\tconsole.log('[AI Chat] 正在加载消息, chatId:', this.chatId);\n\t\t\t\t\n\t\t\t\tif (storedMessages) {\n\t\t\t\t\tconst parsedMessages = JSON.parse(storedMessages);\n\t\t\t\t\tif (Array.isArray(parsedMessages) && parsedMessages.length > 0) {\n\t\t\t\t\t\tconsole.log('[AI Chat] 已加载消息数量:', parsedMessages.length);\n\t\t\t\t\t\t// 更新本地消息列表而不是messages\n\t\t\t\t\t\tthis.localMessageList = parsedMessages;\n\t\t\t\t\t\t// 复制一份到messages以兼容其他可能的引用\n\t\t\t\t\t\tthis.messages = [...parsedMessages];\n\t\t\t\t\t\tthis.hasLoadedMessages = true;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 如果没有找到存储的消息并且还没有加载过\n\t\t\t\tif (!this.hasLoadedMessages) {\n\t\t\t\t\tconsole.log('[AI Chat] 未找到存储的消息，使用默认欢迎消息');\n\t\t\t\t\t// 使用默认欢迎消息\n\t\t\t\t\tconst defaultMessage = {\n\t\t\t\t\t\trole: 'ai',\n\t\t\t\t\t\tcontent: '您好，我是校园AI助手，有什么可以帮助您的吗？'\n\t\t\t\t\t};\n\t\t\t\t\tthis.localMessageList = [defaultMessage];\n\t\t\t\t\tthis.messages = [defaultMessage]; // 同步到messages\n\t\t\t\t\t// 标记为已加载\n\t\t\t\t\tthis.hasLoadedMessages = true;\n\t\t\t\t\t// 保存默认消息\n\t\t\t\t\tthis.saveMessagesToStorage();\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('[AI Chat] 加载消息失败:', e);\n\t\t\t\t// 出错时使用默认消息\n\t\t\t\tconst defaultMessage = {\n\t\t\t\t\trole: 'ai',\n\t\t\t\t\tcontent: '您好，我是校园AI助手，有什么可以帮助您的吗？'\n\t\t\t\t};\n\t\t\t\tthis.localMessageList = [defaultMessage];\n\t\t\t\tthis.messages = [defaultMessage];\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 确保流状态完全关闭\n\t\tensureStreamingClosed() {\n\t\t\t// 直接设置状态，绕过锁机制\n\t\t\tthis.isStreaming = false;\n\t\t\tthis.isLoading = false;\n\t\t\tthis.streamingContent = '';\n\t\t\tthis.streamingChunks = [];\n\t\t\tthis.completedResponse = ''; // 清空completedResponse以避免重复显示\n\t\t}\n\t},\n\tmounted() {\n\t\tconsole.log('[AI Chat] 组件挂载，准备初始化...');\n\t\t\n\t\t// 初始加载消息\n\t\tthis.loadMessagesFromStorage();\n\t\t\n\t\t// 滚动到底部\n\t\tthis.$nextTick(() => {\n\t\t\tthis.scrollToBottom();\n\t\t});\n\t\t\n\t\t// 监听页面返回事件\n\t\tuni.$on('beforeRouteEnter', () => {\n\t\t\tconsole.log('[AI Chat] 页面返回，重新加载消息');\n\t\t\tthis.loadMessagesFromStorage();\n\t\t});\n\t\t\n\t\t// 添加调试信息\n\t\tconsole.log('[AI Chat] 组件挂载完成, chatId:', this.chatId, '消息数量:', this.localMessageList.length);\n\t},\n\tbeforeDestroy() {\n\t\t// 移除事件监听\n\t\tuni.$off('beforeRouteEnter');\n\t\tuni.$off('ai_messages_updated');\n\t\t\n\t\t// 清除定时器\n\t\tif (this.streamEndTimer) {\n\t\t\tclearTimeout(this.streamEndTimer);\n\t\t\tthis.streamEndTimer = null;\n\t\t}\n\t\t\n\t\t// 清理状态\n\t\tthis.isStreaming = false;\n\t\tthis.isLoading = false;\n\t}\n}\n</script>\n\n<style>\n.container {\n\tbackground-color: #F8F3E6;\n\theight: 100vh; /* Fixed height instead of min-height */\n\tbackground-image: url('/static/decoration/paper-texture.png');\n\tposition: relative;\n\toverflow: hidden; /* Prevent overall page scrolling */\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.main-content {\n\tflex: 1;\n\tdisplay: flex;\n\tflex-direction: column;\n\toverflow: hidden; /* Prevent content overflow */\n}\n\n.ai-content {\n\tpadding: 30rpx;\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\tflex-direction: column;\n\ttransition: all 0.3s ease;\n\tflex: 1;\n\tjustify-content: flex-start; /* Align to top instead of center */\n\toverflow: hidden; /* Prevent scrolling in this container */\n}\n\n.ai-content.with-sidebar {\n\tpadding-left: 350rpx;\n}\n\n.header-actions {\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tmargin-bottom: 15rpx;\n}\n\n.history-btn {\n\tdisplay: flex;\n\talign-items: center;\n\tbackground-color: #F0F0F0;\n\tpadding: 10rpx 20rpx;\n\tborder-radius: 30rpx;\n\tfont-size: 24rpx;\n\tcolor: #666;\n}\n\n.history-icon {\n\twidth: 32rpx;\n\theight: 32rpx;\n\tmargin-right: 8rpx;\n}\n\n.history-text {\n\tfont-size: 28rpx;\n}\n\n.chat-container {\n\tbackground-color: #FFFFFF;\n\tborder-radius: 20rpx;\n\tpadding: 20rpx;\n\tbox-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.05);\n\tborder: 1rpx solid rgba(224, 201, 209, 0.5);\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 85vh; /* Increase height to 85% */\n\tmax-height: 85vh;\n\tmargin: 2vh auto 5vh auto; /* Reduced top margin, kept bottom margin */\n\twidth: 100%;\n\toverflow: hidden; /* Ensure content doesn't overflow */\n}\n\n.chat-messages {\n\tflex: 1;\n\tmargin-bottom: 20rpx;\n\toverflow-y: scroll; /* Use scroll instead of auto */\n\tposition: relative;\n\t-webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */\n}\n\n.messages-wrapper {\n\tdisplay: flex;\n\tflex-direction: column;\n\tmin-height: 100%;\n\tpadding-bottom: 20rpx;\n\tpadding-top: 30rpx; /* 增加顶部距离 */\n}\n\n.message-container {\n\twidth: 100%;\n\tdisplay: flex;\n\tmargin-bottom: 20rpx;\n\tbox-sizing: border-box;\n}\n\n.user-container {\n\tjustify-content: flex-end;\n\tpadding-right: 20rpx; /* Add right padding for user messages */\n}\n\n.ai-container {\n\tjustify-content: flex-start;\n\tpadding-left: 0; /* Ensure no padding on the left */\n}\n\n.message {\n\tdisplay: flex;\n\tmax-width: 80%;\n\talign-items: flex-start;\n}\n\n.message-avatar {\n\twidth: 80rpx;\n\theight: 80rpx;\n\tborder-radius: 40rpx;\n\tborder: 2rpx solid #E0C9D1;\n\tflex-shrink: 0;\n\tmargin-right: 20rpx;\n}\n\n.message-content {\n\tpadding: 20rpx;\n\tborder-radius: 16rpx;\n\tposition: relative;\n\tword-break: break-word;\n}\n\n/* Message bubble styles */\n.ai .message-content {\n\tbackground-color: #EEE9E1;\n\tborder-top-left-radius: 4rpx; /* 尖角效果 */\n}\n\n/* Make sure ai messages have avatar on left, content on right */\n.ai {\n\tflex-direction: row;\n}\n\n/* Make sure user messages are right-aligned without avatar */\n.user {\n\tjustify-content: flex-end;\n}\n\n.user .message-content {\n\tbackground-color: #D6E4C9;\n\tborder-top-right-radius: 4rpx; /* 尖角效果 */\n}\n\n.message-text {\n\tfont-size: 28rpx;\n\tline-height: 1.5;\n\tcolor: #333;\n}\n\n.chat-input-area {\n\tdisplay: flex;\n\tborder-top: 1rpx solid #F0F0F0;\n\tpadding-top: 20rpx;\n\tpadding-bottom: 10rpx;\n\tbackground-color: #FFFFFF;\n\tflex-shrink: 0; /* Prevent input area from shrinking */\n}\n\n.chat-input {\n\tflex: 1;\n\theight: 80rpx;\n\tbackground-color: #F8F8F8;\n\tborder-radius: 40rpx;\n\tpadding: 0 30rpx;\n\tfont-size: 28rpx;\n}\n\n.chat-input[disabled] {\n\tbackground-color: #F0F0F0;\n\tcolor: #999;\n}\n\n.send-btn {\n\twidth: 120rpx;\n\theight: 80rpx;\n\tbackground-color: #7EC4CF;\n\tcolor: #FFFFFF;\n\tborder-radius: 40rpx;\n\tmargin-left: 20rpx;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: 28rpx;\n}\n\n.send-btn[disabled] {\n\tbackground-color: #CCCCCC;\n}\n\n/* 侧边栏样式 */\n.chat-sidebar {\n\tposition: fixed;\n\tleft: -320rpx;\n\ttop: 0;\n\twidth: 320rpx;\n\theight: 100vh;\n\tbackground-color: #FFFFFF;\n\tbox-shadow: 0 0 20rpx rgba(0, 0, 0, 0.1);\n\tz-index: 999;\n\ttransition: all 0.3s ease;\n\tdisplay: flex;\n\tflex-direction: column;\n\tpadding-top: env(safe-area-inset-top); /* Support for devices with notches */\n}\n\n.sidebar-open {\n\tleft: 0;\n}\n\n.sidebar-header {\n\tpadding: 30rpx 20rpx;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tborder-bottom: 1rpx solid #EEEEEE;\n}\n\n.sidebar-title {\n\tfont-size: 32rpx;\n\tfont-weight: bold;\n\tcolor: #333;\n}\n\n.sidebar-close {\n\twidth: 60rpx;\n\theight: 60rpx;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n.close-icon {\n\twidth: 40rpx;\n\theight: 40rpx;\n}\n\n.chat-history-list {\n\tflex: 1;\n\tpadding: 20rpx;\n\toverflow-y: auto;\n}\n\n.history-item {\n\tpadding: 20rpx;\n\tborder-bottom: 1rpx solid #F0F0F0;\n\tcursor: pointer;\n}\n\n.history-item:active, .history-item.active-session {\n\tbackground-color: #F5F5F5;\n}\n\n.history-title-row {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tmargin-bottom: 6rpx;\n}\n\n.history-title {\n\tfont-size: 28rpx;\n\tcolor: #333;\n\tfont-weight: 500;\n\twhite-space: nowrap;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\tflex: 1;\n}\n\n.history-date-row {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n}\n\n.history-date {\n\tfont-size: 24rpx;\n\tcolor: #999;\n}\n\n.new-chat {\n\tpadding: 20rpx;\n\tbackground-color: #8A3324;\n\tcolor: #FFFFFF;\n\ttext-align: center;\n\tcursor: pointer;\n}\n\n.new-chat-text {\n\tfont-size: 28rpx;\n}\n\n.empty-history, .loading-message {\n\tpadding: 40rpx 0;\n\ttext-align: center;\n\tcolor: #999;\n\tfont-size: 28rpx;\n}\n\n/* 移动端的遮罩 */\n.sidebar-overlay {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tbackground-color: rgba(0, 0, 0, 0.3);\n\tz-index: 998;\n}\n\n/* Loading animation */\n.loading-dots {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\theight: 30rpx;\n}\n\n.dot {\n\twidth: 10rpx;\n\theight: 10rpx;\n\tbackground-color: #666;\n\tborder-radius: 50%;\n\tmargin: 0 5rpx;\n\tanimation: dot-flashing 1s infinite alternate;\n}\n\n.dot:nth-child(2) {\n\tanimation-delay: 0.2s;\n}\n\n.dot:nth-child(3) {\n\tanimation-delay: 0.4s;\n}\n\n@keyframes dot-flashing {\n\t0% {\n\t\topacity: 0.2;\n\t}\n\t100% {\n\t\topacity: 1;\n\t}\n}\n\n/* Cursor animation for streaming text */\n.cursor {\n\tdisplay: inline-block;\n\twidth: 8rpx;\n\theight: 24rpx;\n\tbackground-color: #333;\n\tmargin-left: 4rpx;\n\tvertical-align: middle;\n\tanimation: cursor-blink 0.8s infinite;\n}\n\n@keyframes cursor-blink {\n\t0%, 100% {\n\t\topacity: 0;\n\t}\n\t50% {\n\t\topacity: 1;\n\t}\n}\n\n/* 适配小屏幕设备 */\n@media screen and (max-width: 768px) {\n\t.ai-content.with-sidebar {\n\t\tpadding-left: 30rpx;\n\t}\n}\n\n/* Responsive adjustments */\n@media screen and (max-height: 700px) {\n\t.chat-container {\n\t\theight: 75vh;\n\t\tmax-height: 75vh;\n\t\tmargin: 3vh auto;\n\t}\n\t\n\t.chat-messages {\n\t\theight: calc(75vh - 140rpx);\n\t}\n}\n\n.send-icon {\n\twidth: 40rpx;\n\theight: 40rpx;\n}\n\n.loading-icon {\n\twidth: 40rpx;\n\theight: 40rpx;\n\tanimation: rotating 2s linear infinite;\n}\n\n@keyframes rotating {\n\tfrom {\n\t\ttransform: rotate(0deg);\n\t}\n\tto {\n\t\ttransform: rotate(360deg);\n\t}\n}\n\n.sidebar-title-icon {\n\twidth: 40rpx;\n\theight: 40rpx;\n\tmargin-right: 10rpx;\n\tvertical-align: middle;\n}\n\n.new-chat-icon {\n\twidth: 32rpx;\n\theight: 32rpx;\n\tmargin-right: 10rpx;\n\tvertical-align: middle;\n}\n\n.history-item-icon {\n\twidth: 28rpx;\n\theight: 28rpx;\n\tmargin-right: 8rpx;\n\tvertical-align: middle;\n}\n\n.history-date-icon {\n\twidth: 24rpx;\n\theight: 24rpx;\n\tmargin-right: 6rpx;\n\topacity: 0.6;\n\tvertical-align: middle;\n}\n\n.message-bubble-icon {\n\twidth: 36rpx;\n\theight: 36rpx;\n\tmargin-right: 6rpx;\n\tvertical-align: middle;\n\topacity: 0.7;\n}\n</style> ","import mod from \"-!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../App/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1748169082991\n      var cssReload = require(\"C:/App/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}